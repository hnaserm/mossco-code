/**
@mainpage The Modular System for Shelf and Coastal Seas

@section project-goals Project goals

The overarching goal of the project ``Modular System for Shelves and Coasts'' (MOSSCO) is to bring together the distributed capacities in coastal ocean modelling in Germany and to build a common infrastructure for the national and international coastal research community.

@image latex MOSSCO-schema_400px.png "Schematic overview of the MOSSCO system" width=.5\hsize

MOSSCO will build a framework for a modular data and model system, an infrastructure, which has been identified as research demand by the ``Forschungsagenda Nord- und Ostsee''. It should integrate physical, biological, chemical and geological modules in an exchangeable way. This modular infrastructure will support synoptic studies of coastal and shelf seas including their interfaces to adjacent Earth-system components, such as sediment, atmosphere, rivers and the open ocean. Benefits of this approach are most apparent for the description of cohesive sediments where strong interactions between the benthic and pelagic compartment and between hydrodynamic, biogeochemical (BGC), ecological and sedimentary processes are largely unresolved within state-of-the-art models. MOSSCO will therefore be applied to cohesive sediment dynamics and transport problems on two spatial coastal scales: In an application to the entire German North Sea and Baltic Sea, we will demonstrate the modular concept of MOSSCO, study sediment fluxes along the coast, and support other FONA projects. In a study of two estuaries, we will focus on the impact of maintenance dredging and channel deepening on water quality and ecosystem services, including potential effects of climate change. Using a webGIS frontend of the modular system, the estuarine results will be evaluated for their compliance to coastal policies. 

@section obtaining-code How to obtain the code

The web site interface could look like this (depending on your browser)

@image latex sf_git_screenshot.png "Screenshot of using sourceforge" width=0.5\hsize

The code is available from the sourceforge site via @c git for read-only access.  If you are a developer and registered as a participant of the MOSSCO project, you may use a modified version of this command to gain write access.

~~~~
git clone git://git.code.sf.net/p/mossco/code mossco-code
~~~~

We refer to the created directory @c mossco-code as @c MOSSCODIR.  You can freely choose this directory, and you should make this an environment variable.

@section installing Installing MOSSCO

MOSSCO has some necessary and some optional prerequisites.  Please make sure you meet these prerequisites before you try to compile MOSSCO.

@subsection prerequisites MOSSCO prerequisites

- GNU Make
- Fortran Compiler (Intel >= 12.0 and GNU Fortran >= 4.7.2 tested) with support for the FORTRAN 2003 standard
- FABM
- ESMF (optional)
- GOTM (optional)
- doxygen (to create the documentation)

@subsection installing-fabm Installing FABM

Decide on a directory where to install FABM, and set the environment variable $FABMDIR to point to this directory

- download the git repository of FABM: @code git clone git://git.code.sf.net/p/fabm/code $FABMDIR @endcode
- change into the new directory @code cd $FABMDIR @endcode
- check out the mossco branch of FABM: @code git checkout mossco @endcode
- set a suitable @c $FORTRAN_COMPILER environment variable, such as IFORT or GFORTRAN (see the FABM documentation for more options)
- you do not need to (but you can) precompile fabm, this is also handled by the MOSSCO system

An example environment for FABM could look like this:
Environment variable | value
---|---
FABMDIR | $HOME/opt/src/fabm-code
FABM_F2003 | true
FORTRAN_COMPILER | GFORTRAN

@subsection installing-gotm Installing GOTM

Careful: the GOTM install is not required to demonstrate the MOSSCO system.  Code and instructions are to be considered experimental!

Decide on a directory where to install GOTM, and set the environment variable $GOTMDIR to point to this directory

- download the git repository of GOTM: @code git clone git://git.code.sf.net/p/gotm/gotm-code $GOTMDIR @endcode
- change into the new directory @code cd $GOTMDIR @endcode
- set a suitable @c $FORTRAN_COMPILER environment variable, such as IFORT or GFORTRAN
- you need to precompile gotm to work with MOSSCO

An example environment for GOTM could look like this:
Environment variable | value
---|---
FABMDIR | $HOME/opt/src/fabm-code
GOTMDIR | $HOME/opt/src/gotm-code
FABM_F2003 | true
FABM | true
FORTRAN_COMPILER | GFORTRAN

@subsection installing-esmf Installing ESMF

Decide on a directory where to put the ESMF source, and set the environment variable $ESMF_DIR to point to this directory.

- download the git repository of esmf: 
- checkout the 6_2_0 tagged version: @code git checkout ESMF_6_2_0 @endcode

An example environment for ESMF could look like this:
Environment variable | value
---|---
ESMFMKFILE | $HOME/opt/src/esmf/lib/libg/Linux.gfortran.64.mpich2.default/esmf.mk
ESMF_DIR | $HOME/opt/src/esmf
ESMF_COMM | mpich2
ESMF_NETCDF | split
ESMF_NETCDF_INCLUDE | $HOME/opt/include
ESMF_NETCDF_LIBPATH | /opt/gcc47/netcdf4/all_libs
ESMF_LAPACK | netlib
ESMF_PIO | internal

See the ESMF manual for a complete list of ESMF environment variables and their relevance.

@subsection building Building MOSSCO

To create the MOSSCO libraries, currently libsediment.a and libsolver.a, simply issue
@c make in your @c $MOSSCODIR.  This will automaticall build the @c src target and provide the 
libraries in @c $MOSSCODIR/lib/$FORTRAN_COMPILER

To create the documentation (the file you're reading right now), issue 

~~~~
make doc
~~~~

(don't worry too much about the warning messages that occur with outdated doxygen version.  Also, some of the heading and table markup may not render correctly with old doxygen versions). If you do not have doxygen installed, you can alternatively download a fairly recent pdf of the documentation at https://sourceforge.net/projects/mossco/files/Reference%20Manual/. 

To create the examples and test your installation, issue

~~~~
make examples
~~~~

Then change to the examples subdirectories and run the testcases (see below)

To clean everything and start anew, type

~~~~
make distclean
~~~~

Beware that this does not clean your installation of FABM, for which you would need make distclean in @c $FABMDIR and @c $FABMDIR/src.

@section reporting Reporting errors

Bugs as well as annoyances and feature requests are collected in a bug tracker located at https://sourceforge.net/projects/mossco/tickets/.  Please search for an existing ticket before reporting a new one.  

Do report any issue that you observe, even if this later turns out to be a problem related to your local computing environment and not to the MOSSCO code itself.  We encourage to document any problem that you encountered during the installation of MOSSCO: someone else might have the same issue and could profit from your experience.

@section status MOSSCO status

The MOSSCO system was successfully tested on the following machines and environments.  Please report successful testing on your machine (e.g., in the project wiki), and issue a new tag, if you area developer.

# Successful compilation and execution of examples #

Operating System | Compiler | Configuration | Machine | Status
--|--|--|--|--
Ubuntu Linux 3.8.0 x86-64 | gfortran-4.7.3/mpich | FABM/ESMF/GOTM | ksez8002 (cl)| complete
OSX 10.6.8 | gfortran-4.7.2/mpich | FABM/ESMF | macchi (rh)| complete
Ubuntu Linux 3.8.0| gfortran-4.7.3/mpich2 | FABM/ESMF | phy-203 (IOW, kk)| complete
SUSE Linux 2.6.16 | ifort-12.1 | FABM | bicegate (HLRN, kk) | complete
SUSE Linux 3.0 | ifort-12.1.5 | FABM | ICE-X (BAW) | complete
Debian Linux 7.1 | gfortran 4.7.2/mpich2-1.4 | FABM/ESMF | grpsrv09 (hk) | complete

# Successful compilation but runtime errors #

Operating System | Compiler | Configuration | Machine | Status
--|--|--|--|--
Suse Linux 2.6.16 x86-64 | ifort-11.1 | FABM | grpsrv05 (cl)| compiles
OSX 10.8.4 x86-64| gfortran-4.8.1/mpich | FABM | possum (cl) | compiles

@section testcases Running the testcases

There are currently three examples that you can run
- a FABM standalone sediment driver (in examples/omexdia_p)
- a FABM/ESMF sediment component (in examples/esmf_sediment)
- a GOTM/ESMF test case driver (in examples/esmf_gotm)


@subsection testcases-fabm The FABM standalone sediment driver

All configuration files are contained in the example.  Run

~~~~
(cd $MOSSCODIR/examples/omexdia_p ; ./omexdia_p_test)
~~~~

@subsection testcases-esmf-sediment The ESMF/FABM sediment driver

All configuration files are contained in the example.  Run

~~~~
(cd $MOSSCODIR/examples/esmf_sediment ; ./esmf_sediment_example)
~~~~

@subsection testcases-gotm The GOTM testcase driver

You need to download the GOTM test cases first to a directory of your choice.  Let's assume your GOTM
test cases should be installed in the directory $GOTMCASEDIR, then run

~~~~
git clone git://git.code.sf.net/p/gotm/gotm-cases $GOTMCASEDIR
~~~~
  
To run the northern North Sea annual testcase, issue the following

~~~~
(cd $GOTMCASEDIR/nns_annual ; $MOSSCODIR/examples/esmf_gotm/esmf_gotm_example)
~~~~


@subsection testcases-fabm0d The FABM 0d driver

Prerequisites are both FABM and GOTM.  To make the FABM library with the 0d driver,
issue 

~~~~
make -C $FABMDIR/src 0d
~~~~
  
(There are no instructions here on how to use this example yet)



*/
