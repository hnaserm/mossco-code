/**
@mainpage The Modular System for Shelf and Coastal Seas

@section project-goals Project goals

The overarching goal of the project Modular System for Shelves and Coasts (MOSSCO, [www.mossco.de](http://www.mossco.de/ "Modular System for Shelves and Coasts")) is to bring together the distributed capacities in coastal ocean modelling in Germany and to build a common infrastructure for the national and international coastal research community.

@image latex MOSSCO-schema_400px.png "Schematic overview of the MOSSCO system" width=.6\hsize

MOSSCO will build a framework for a modular data and model system, an infrastructure, which has been identified as research demand by the Forschungsagenda Nord- und Ostsee within framework of the Research Agenda for Sustainable Development (FONA, [www.fona.de](http://www.fona.de/ "Forschung fÃ¼r Nachhaltige Entwicklung")). MOSSCO integrates physical, biological, chemical and geological modules in an exchangeable way. This modular infrastructure supports synoptic studies of coastal and shelf seas including their interfaces to adjacent Earth-system components, such as sediment, atmosphere, rivers and the open ocean. Benefits of this approach are most apparent for the description of cohesive sediments where strong interactions between the benthic and pelagic compartment and between hydrodynamic, biogeochemical (BGC), ecological and sedimentary processes are largely unresolved within state-of-the-art models. MOSSCO will therefore be applied to cohesive sediment dynamics and transport problems on two spatial coastal scales: In an application to the entire German North Sea and Baltic Sea, we will demonstrate the modular concept of MOSSCO, study sediment fluxes along the coast, and support other FONA projects. In a study of two estuaries, we will focus on the impact of maintenance dredging and channel deepening on water quality and ecosystem services, including potential effects of climate change. Using a webGIS frontend of the modular system, the estuarine results will be evaluated for their compliance with coastal policies. 

@section obtaining-code How to obtain the code

While the public web site with documentation on the MOSSCO project is hosted at [www.mossco.de](http://www.mossco.de), the software, blog, and bug tracker is hosted on [sf.net/p/mossco](http://www.sf.net/p/mossco).  To obtain the code, change to the "Git" tab at that site, or follow this link [sf.net/p/mossco/code](http://www.sf.net/p/mossco/code).

@latexonly The web site interface could look as follows (depending on your browser)
{\begin{center}\includegraphics[width=.7\hsize]{sf_git_screenshot.png}\\ {Screenshot of using sourceforge}\end{center}
@endlatexonly


The code is available via @c git for read-only access. Choose a local directory @c $MOSSCO_DIR, where you would like the mossco code to reside;  you should make this an environment variable.

~~~~sh
git clone git://git.code.sf.net/p/mossco/code $MOSSCO_DIR
~~~~

or, alternatively using the http protocol 

~~~~
git clone http://git.code.sf.net/p/mossco/code $MOSSCO_DIR
~~~~

If you are a developer and registered as a participant of the MOSSCO project, you may use a modified version of this command to gain write access.

If you do not have @c git, you may also download a zipped version of the source code from the "Files" section at [sf.net/projects/mossco/files](https://sourceforge.net/projects/mossco/files/). Note, however, that these snapshots may be somewhat outdated at the time of your download.  Download the file to the directory where $MOSSCO_DIR points to, then unzip it.

@section installing Installing MOSSCO

MOSSCO has some necessary and some optional prerequisites.  Please make sure you meet these prerequisites before you try to compile MOSSCO.

@subsection prerequisites MOSSCO prerequisites

@subsubsection necessary-prereqs Necessary prerequisites

Program | Minimum version and alternatives
--------|----------
GNU Make | 3.0
Fortran 2003 Compiler | e.g. GNU  >= 4.7.2, Intel >= 12.0
FABM | most recent
ESMF | 5.2 or 6.2

For help on installing FABM and ESMF, see the next sections below.  Please make sure to use the same compiler for FABM, ESMF, and MOSSCO.  

@subsubsection optional-prereqs Optional prerequisites

Program | Minimum version and alternatives
-------|-----------
NetCDF | 3.6
Message Passing Interface | OpenMPI or MPICH >= 3.0.4 
GOTM | most recent

Please make sure to install NetCDF and MPI with the same compiler that you use for FABM and ESMF. Because of the dependencies of the software packages, use the following compile order
1. Choose a FORTRAN compiler
2. Compile MPI for this specific compiler
3. Compile NetCDF libraries with this specific compiler and MPI support
4. Compile ESMF with matching NetCDF and MPI library settings
5. Compile FABM with matching NetCDF
6. Compile GOTM with matching NetCDF and FABM

@subsubsection doc-prereqs Documentation prerequisites

Program | Minimum version and alternatives
-------|-----------
Doxygen | >= 1.8
Latex | with pdf latex support

Other versions may also work, but have not been tested.  You may also try to go ahead with an existing lower version of a required software package, report possible errors, and argue why you would like us to support your version.

@subsection installing-fabm Installing FABM

Decide on a directory where to install FABM, and set the environment variable $FABMDIR to point to this directory

- download the git repository of FABM: @code git clone git://git.code.sf.net/p/fabm/code $FABMDIR @endcode
- change into the new directory @code cd $FABMDIR @endcode
- check out the mossco branch of FABM: @code git checkout mossco @endcode
- set a suitable @c $FORTRAN_COMPILER environment variable, such as IFORT or GFORTRAN (see the FABM documentation for more options)
- you do not need to (but you can) precompile fabm, this is also handled by the MOSSCO system

An example environment for FABM could look like this:
Environment variable | value
---|---
FABMDIR | $HOME/opt/src/fabm-code
FABM_F2003 | true
FORTRAN_COMPILER | GFORTRAN

@subsection installing-gotm Installing GOTM

Careful: the GOTM install is not required to demonstrate the MOSSCO system.  Code and instructions are to be considered experimental!

Decide on a directory where to install GOTM, and set the environment variable $GOTMDIR to point to this directory

- download the git repository of GOTM: @code git clone git://git.code.sf.net/p/gotm/gotm-code $GOTMDIR @endcode
- change into the new directory @code cd $GOTMDIR @endcode
- set a suitable @c $FORTRAN_COMPILER environment variable, such as IFORT or GFORTRAN
- while not in the offical GOTM, add and checkout the mossco branch (can be obtained from the developers)
- you need to precompile gotm to work with MOSSCO

An example environment for GOTM could look like this:
Environment variable | value
---|---
FABMDIR | $HOME/opt/src/fabm-code
GOTMDIR | $HOME/opt/src/gotm-code
FABM_F2003 | true
FABM | true
FORTRAN_COMPILER | GFORTRAN

@subsection installing-esmf Installing ESMF

Decide on a directory where to put the ESMF source, and set the environment variable @c $ESMF_DIR to point to this directory.

- download the git repository of esmf: @code git clone git://git.code.sf.net/p/esmf/esmf $ESMF_DIR @endcode
- change to this directory : @code cd $ESMF_DIR @endcode
- checkout the 6_2_0 tagged version: @code git checkout ESMF_6_2_0 @endcode
- set ESMF's environment variables

An example environment for ESMF could look like this:
Environment variable | value
---|---
ESMF_DIR | $HOME/opt/src/esmf
ESMF_COMM | mpich2
ESMF_NETCDF | split
ESMF_NETCDF_INCLUDE | $HOME/opt/include
ESMF_NETCDF_LIBPATH | /opt/gcc47/netcdf4/all_libs
ESMF_LAPACK | netlib
ESMF_PIO | internal

See the ESMF manual for a complete list of ESMF environment variables and their relevance.

- build ESMF (no need to install it) by issuing @c make
- for MOSSCO to work, you need to define the environment variable @c $ESMFMKFKILE, e.g.

Environment variable | value
---|---
ESMFMKFILE | $HOME/opt/src/esmf/lib/libg/Linux.gfortran.64.mpich2.default/esmf.mk


@subsection building Building MOSSCO

To create the MOSSCO libraries, currently libsediment.a and libsolver.a, simply issue
@c make in your @c $MOSSCO_DIR.  This will automaticall build the @c src target and provide the 
libraries in @c $MOSSCO_DIR/lib/$FORTRAN_COMPILER

To create the documentation (the file you're reading right now), issue 

~~~~sh
make doc
~~~~

(don't worry too much about the warning messages that occur with outdated doxygen version.  Also, some of the heading and table markup may not render correctly with old doxygen versions). If you do not have doxygen installed, you can alternatively download a fairly recent pdf of the documentation at https://sourceforge.net/projects/mossco/files/Reference%20Manual/. 

To create the examples and test your installation, issue

~~~~sh
make examples
~~~~

Then change to the examples subdirectories and run the testcases (see below)

To clean everything and start anew, type

~~~~
make distclean
~~~~

Beware that this does not clean your installation of FABM, for which you would need make distclean in @c $FABMDIR and @c $FABMDIR/src.

@section reporting Reporting errors

Bugs as well as annoyances and feature requests are collected in a bug tracker located at https://sourceforge.net/projects/mossco/tickets/.  Please search for an existing ticket before reporting a new one.  

Do report any issue that you observe, even if this later turns out to be a problem related to your local computing environment and not to the MOSSCO code itself.  We encourage to document any problem that you encountered during the installation of MOSSCO: someone else might have the same issue and could profit from your experience.

@section status MOSSCO status

The MOSSCO system was successfully tested on the following machines and environments.  Please report successful testing on your machine (e.g., in the project wiki), and issue a new tag, if you area developer.

# Successful compilation and execution of examples #

Operating System | Compiler | Configuration | Machine | Status
--|--|--|--|--
Ubuntu Linux 3.8.0 x86-64 | gfortran-4.7.3/mpich | FABM/ESMF/GOTM | ksez8002 (cl)| complete
OSX 10.6.8 | gfortran-4.7.2/mpich | FABM/ESMF | macchi (rh)| complete
Ubuntu Linux 3.8.0| gfortran-4.7.3/mpich2 | FABM/ESMF | phy-203 (IOW, kk)| complete
SUSE Linux 2.6.16 | ifort-12.1 | FABM | bicegate (HLRN, kk) | complete
SUSE Linux 3.0 | ifort-12.1.5 | FABM | ICE-X (BAW) | complete
Debian Linux 7.1 | gfortran 4.7.2/mpich2-1.4 | FABM/ESMF | grpsrv09 (hk) | complete

@section testcases Running the testcases

There are currently three examples that you can run
- a FABM standalone sediment driver (in examples/omexdia_p)
- a FABM/ESMF sediment component (in examples/esmf_sediment)
- a GOTM/ESMF test case driver (in examples/esmf_gotm)
- an empty ESMF test case driver (in examples/esmf_empty)


@subsection testcases-fabm The FABM standalone sediment driver

All configuration files are contained in the example.  Run

~~~~
(cd $MOSSCO_DIR/examples/omexdia_p ; ./omexdia_p_test)
~~~~

@subsection testcases-esmf-sediment The ESMF/FABM sediment driver

All configuration files are contained in the example.  Run

~~~~
(cd $MOSSCO_DIR/examples/esmf_sediment ; ./esmf_sediment_example)
~~~~

@subsection testcases-gotm The GOTM testcase driver

You need to download the GOTM test cases first to a directory of your choice.  Let's assume your GOTM
test cases should be installed in the directory $GOTMCASEDIR, then run

~~~~
git clone git://git.code.sf.net/p/gotm/gotm-cases $GOTMCASEDIR
~~~~
  
To run the northern North Sea annual testcase, issue the following

~~~~
(cd $GOTMCASEDIR/nns_annual ; $MOSSCO_DIR/examples/esmf_gotm/esmf_gotm_example)
~~~~


@subsection testcases-fabm0d The FABM 0d driver

Prerequisites are both FABM and GOTM.  To make the FABM library with the 0d driver,
issue 

~~~~
make -C $FABMDIR/src 0d
~~~~
  
Then go to $MOSSCO_DIR/examples/esmf_fabm0d and run the example:

~~~~
(cd $MOSSCO_DIR/examples/esmf_fabm0d ; ./esmf_fabm0d)
~~~~

All configuration files are contained in the example.

@section references References

- K. W. Wirtz et al. (2012): Modular System for Shelves and Coasts (MOSSCO), Proposal for a project in response to the BMBF call KÃ¼stenmeerforschung in Nord- und Ostsee in the framework of Forschung fÃ¼r nachhaltige Entwicklungen (FONA).  Available online http://www.mossco.de/Leitantrag_MOSSCO.pdf.

- B. von Bodungen et al. (2011): KÃ¼stenforschungsagenda fÃ¼r Nord- und Ostsee Im Rahmen des BMBF-Programms âForschungen fÃ¼r nachhaltige Entwicklungen,   ProjekttrÃ¤ger JÃ¼lich (PTJ). Available online http://www.ptj.de/lw_resource/datapool/_items/item_3404/kstenforschung02122011_internet.pdf

- B. von Bodungen et al. (2007): KÃ¼stenmeere im Wandel: Forschungsbedarf der deutschen KÃ¼sten- und Randmeerforschung, Konsortium Deutsche Meeresforschung (KDM). Available online http://www.deutsche-meeresforschung.de/docs/KDM_Kuestenschrift_3.pdf (English translation at http://www.deutsche-meeresforschung.de/docs/KDM_Coastal_Seas_Memorandum.pdf)

*/
